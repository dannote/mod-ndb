#include "mod_ndb.h"

COMPILER NSQL

cmd_parms *cmd;
config::dir *dir;
NSQL::Expr e;
char *idxname;
const char *cf_err;
int is_bounded;

char * copy_token() { return coco_create_apache_string(cmd->pool, t->val); }

void build_index(char *idxtype) {
  if(config::get_index_by_name(dir, idxname) == -1)
    config::build_index_record(cmd, dir, idxtype, idxname);
}

void index_condition()  {
  const char *cf_err = 0;
  if(e.vtype == NSQL::Param) 
    cf_err = config::named_idx(cmd, dir, idxname, &e);
  else if(e.vtype == NSQL::Const)
    cf_err = config::index_constant(cmd, dir, idxname, &e);
  else assert(0);
  if(cf_err) SemErr(cf_err);
}  
  
IGNORECASE

CHARACTERS
  letter = 'a'..'z' + 'A'..'Z' + "#%^_".
  special = "$@!:?-/{}[]".
  digit = "0123456789".
  char = letter + digit + special.
  quote = '"'.
  escapechar = '\\' + quote.
  nonquote = ANY - '"' - escapechar.

TOKENS 
  DBName = letter { char } CONTEXT(".").
  FuncName = letter { letter | digit } CONTEXT("(").
  Name = letter { char }.
  qstring = quote { nonquote | '\\' escapechar } quote.
  number = digit { digit } ['.' digit { digit }].
  
COMMENTS FROM "/*" TO "*/"
IGNORE '\n' + '\r' + '\t' 

PRODUCTIONS
  NSQL = (SelectQuery | DeleteQuery | QueryPlan) ";".
  SelectQuery = "SELECT" Column { "," Column } "FROM" TableSpec [ QueryPlan ].
  DeleteQuery = "DELETE" "FROM" TableSpec OneRowWhereClause
                                             (. dir->flag.allow_delete = 1; .) .
  QueryPlan = OneRowWhereClause | Scan .
  OneRowWhereClause = "WHERE" UniqueIndexSpec .

  Scan = "USING"                   (. idxname = "PRIMARY"; is_bounded = 0;  .)
     ("TABLE" "SCAN"               (. dir->flag.table_scan = 1;             .) 
     | IndexScan ["ORDER" Order] ).
  
  Column = Name                   (. char *c_name  = copy_token();          .)
                                  (. char *c_alias = c_name;                .)
   [ "AS" Name                    (. c_alias = copy_token();                .)
   ]                              (. *dir->visible->new_item() = c_name;    .)
                                  (. *dir->aliases->new_item() = c_alias;   .) .

  TableSpec = 
    [ DBName                               (. dir->database = copy_token(); .)
     "." ] Name                               (. dir->table = copy_token(); .) .

  UniqueIndexSpec                                    (. char *idxtype = ""; .)
    = ( "PRIMARY" "KEY"        (. idxtype = "P"; idxname = "*Primary$Key*"; .)
      | "UNIQUE" "INDEX" Name  (. idxtype = "U"; idxname = copy_token();    .)
    )                          (. build_index(idxtype);                     .)
     "=" ValueList .

  ValueList                         (. e.base_col_name = "" ; e.rel_op = 4; .)
    = IndexValue { "," IndexValue } .

  IndexScan = "ORDERED" "INDEX"                 
    [ Name                                       (. idxname = copy_token(); .)
      | "PRIMARY" 
    ] ( WhereClause 
      | /* empty = full index scan */         (. dir->flag.table_scan = 1;  .)
                                        (. dir->index_scan->name = idxname; .)
    ) .

  WhereClause = "WHERE"                               (. build_index("O");  .)
                                                      (. is_bounded = 1;    .)
    IndexCondition { "AND" IndexCondition } .

  IndexCondition                           
    = Name                               (. e.base_col_name = copy_token(); .)
    relop IndexValue .

  Order = "ASC"   (. config::sort_scan(dir,is_bounded,idxname, NSQL::Asc);  .)
   | "DESC"       (. config::sort_scan(dir,is_bounded,idxname, NSQL::Desc); .) .
  
  relop = ( "="                                           (. e.rel_op = 4;  .)
    | "<"                                                 (. e.rel_op = 3;  .)
    | "<="                                                (. e.rel_op = 2;  .)
    | ">"                                                 (. e.rel_op = 1;  .)
    | ">="                                                (. e.rel_op = 0;  .)
  ) .

  IndexValue = 
    ( ["$"] Name          (. e.vtype = NSQL::Param; e.value = copy_token(); .)
      | constant          (. e.vtype = NSQL::Const; e.value = copy_token(); .)
    )                                                 (. index_condition(); .) .
  
  constant = qstring | number .
  
END NSQL .
