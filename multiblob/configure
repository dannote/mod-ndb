#!/bin/sh

APXS=`which apxs`
APXS1=`which apxs`
MYSQLCFG=`which mysql_config`
GET_LIBS='--libs'
CONFIG_CMD="$0 $@"
OPT='-O3'

usage() {
  echo
  echo "Building mod_ndb requires an installed copy of MySQL, including "
  echo "NDB Cluster, libraries, header files, and the mysql_config utility, "
  echo "plus an installed copy of Apache including apxs. "
  echo 
  echo "Required: "
  echo "       --mysql=/path/to/mysql_config "
  echo "       --apxs=/path/to/apxs "
  echo 
  echo "Options:  "
  echo "       --apxs1=/path/to/apache13/apxs"
  echo "       --aprconfig=/path/to/apr-config"
  echo "       --thread-safe"
  echo "       --debug"
}

long_help() {
  echo 
  echo "To build an Apache 2 module, you must use apxs from *both* apache 1.3 and 2:"
  echo "  $0 --apxs=/apache/2/apxs --apxs1=/apache/1.3/apxs "
  echo
  echo "Defaults: --mysql=$MYSQLCFG --apxs=$APXS --apxs1=$APXS"
  echo 
  echo "Use --thread-safe if you have a thread-safe mysql client library."
  echo "If your apr is installed outside of apache2, use --aprconfig."
  echo
  echo "Use --debug to compile with '-g -O0', and enable debug log "
  echo "messages; otherwise compile with '-O3'."
  echo 
}

fail() { 
 echo ; echo "Error: $1" ; echo ; exit 1
}

while test $# != 0
do
  case $1 in
   --*=*)
    conf_option=`expr "x$1" : 'x\([^=]*\)='`
    conf_arg=`expr "x$1" : 'x[^=]*=\(.*\)'`
    shift
    ;;
   *)
    conf_option=$1
    shift
    ;;
  esac
  
  case $conf_option in 
    --debug)
      OPT='-g -O0'
      DEFINE='-DMOD_NDB_DEBUG=1'
      ;;
    --mysql)
      MYSQLCFG=$conf_arg
      ;;
    --apxs)
      APXS=$conf_arg 
      ;;
    --apxs1)
      APXS1=$conf_arg
      ;;
    --thread-safe)
      GET_LIBS='--libs_r'
      ;;
    --aprconfig)
      APRCONFIG=$conf_arg
      test -x $APRCONFIG || fail "Cannot execute $APRCONFIG"
      ;;
    --help)
      usage
      long_help
      exit
      ;;
    *)
      fail "Unrecognized option " $conf_option
      ;;
  esac
done

## On Solaris, the standards-compliant shell utilities are in /usr/xpg4/bin,
## including the "grep" that understands the "-q" option.
test -d /usr/xpg4/bin && PATH=/usr/xpg4/bin:$PATH

## Check the Apache version
HTTPD="`$APXS -q SBINDIR`/`$APXS -q TARGET`"
START_APACHE="$HTTPD -f \$(SRCDIR)/httpd.conf"
$HTTPD -v
if $HTTPD -v | grep -q "Apache/1.3" 
 then 
  echo "Using Apache 1.3"
  MOD_SOURCE=mod_ndb_ap13.cc
  APACHE_VER=ap13
  STOP_APACHE='kill `cat logs/httpd.pid`'
  RESTART_APACHE='kill -HUP `cat logs/httpd.pid`'
  APXS1=$APXS
 else 
  MOD_SOURCE=mod_ndb_ap20.cc
  if $HTTPD -v | grep -q "Apache/2.2"
   then
    echo "Using Apache 2.2"
    APACHE_VER=ap22
   else 
    echo "Using Apache 2.0"
    APACHE_VER=ap20
  fi
  STOP_APACHE="$HTTPD -f \$(SRCDIR)/httpd.conf -k stop"
  RESTART_APACHE="$HTTPD -f \$(SRCDIR)/httpd.conf -k restart"  
fi
echo

echo "Configuring with"
echo "    apxs =         " $APXS 
echo "    apxs 1.3 =     " $APXS1
echo "    mysql_config = " $MYSQLCFG 
[ -n "$APRCONFIG" ] && echo "    apr-config =   " $APRCONFIG
echo "    libs         = " $GET_LIBS
echo

if [ ! -x "$APXS" ]
 then 
  fail "Error: apxs path is not valid."
fi
if [ ! -x "$APXS1" ]
 then
   fail "Error: apxs1 path is not valid.  (Apache 1.3 apxs is also required)"
fi
if [ ! -x "$MYSQLCFG" ] 
 then
  fail "Error: mysql_config path is not valid." 
fi
if [ -x "$APRCONFIG" ]
 then
  APRLD=`$APRCONFIG --ldflags`
  APRINC=`$APRCONFIG --includes`
fi
 
MY_INC=`$MYSQLCFG --include`
MY_LIBS=`$MYSQLCFG $GET_LIBS`
LDSO_PATH=`$MYSQLCFG --libs | perl -n -e 'if(/-L(\S*)/) { print $1 }'`

if $MYSQLCFG --version | grep -q '^5.1.' 
 then NDB_PATH=storage/ndb 
 else NDB_PATH=ndb 
fi

#### Prepare a test/demo environment 
rm -f modules 
ln -s `$APXS -q LIBEXECDIR` modules
test -d logs || mkdir logs
test -f test.conf || cp test.conf.dist test.conf

# If a module exists both in the "desired modules" template file and in the
# modules directory, then include it in the configuration template
awk ' !/^#/ {print $2}' templates/modules_$APACHE_VER | sort > modules_desired
(cd modules ; ls ) | sort | comm -12 - modules_desired >  modules_avail
join -2 2 modules_avail templates/modules_$APACHE_VER | \
 awk '{printf("LoadModule\t%s \t\t modules/%s \n",$2,$1) }' > modules_conf


# Create the sed script which will generate httpd.conf from the template:
(
echo s!@AP_USER@!`whoami`!
echo s!@AP_GROUP@!`groups | awk '{print $NF}'`!
echo s!@AP_DIR@!`pwd`!
echo '/#-Other-Modules/r modules_conf'
echo '/#-Load-Files/r loadfiles_conf'
) > template.sed 

# The actual httpd.conf is created by the Makefile.

# Start of the Makefile:
(
echo '#' Makefile for mod_ndb.  Automatically generated from:
echo '#' $CONFIG_CMD
echo
echo CC=g++
echo DEFINE=$DEFINE
echo APXS=$APXS
echo MOD_SOURCE=$MOD_SOURCE
echo SRCDIR=`pwd`
echo
echo MY_INC1=$MY_INC
echo MY_INC2=$MY_INC/$NDB_PATH
echo MY_INC3=$MY_INC/$NDB_PATH/ndbapi
echo MY_LIBS=$MY_LIBS
echo MYSQL_LIBS="-lndbclient -lmystrings $MY_LIBS -lmysys -lstdc++"
echo 
echo OPT=$OPT
echo APXS_INCLUDEDIR=`$APXS -q INCLUDEDIR` $APRINC
echo APXS_CFLAGS=`$APXS1 -q CFLAGS`   
echo APXS_CFLAGS_SHLIB=`$APXS1 -q CFLAGS_SHLIB`   
echo APXS_LDFLAGS_SHLIB=`$APXS1 -q LDFLAGS_SHLIB`
echo APXS_LIBS_SHLIB=`$APXS1 -q LIBS_SHLIB`
echo
echo LDSO_PATH=$LDSO_PATH
echo TEMPLATE=templates/conf_$APACHE_VER
echo START_HTTPD=$START_APACHE
echo STOP_HTTPD=$STOP_APACHE
echo RESTART_HTTPD=$RESTART_APACHE
echo

) > Makefile


cat make_file_tail >> Makefile

echo "Created Makefile."
echo
echo "Removing out-of-date files:"
make clean
echo
echo "Hello!"
echo 
echo "   make            : build mod_ndb" 
echo "   make install    : install mod_ndb.so"
echo "   make configtest : test configuration"
echo "   make start      : start a test server on port 3080"
echo "   make stop       : stop the test server"
echo "   make restart    : restart the test server" 
echo 
echo "To configure the test server, edit test.conf"
echo
echo "Thanks for trying mod_ndb!"
echo

